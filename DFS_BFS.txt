def dfs(visited, graph, node):
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

def bfs_recursive(visited, graph, queue):
    if not queue:
        return
    
    node = queue.pop(0)  # Pop the front node from the queue
    if node not in visited:
        print(node, end=" ")
        visited.add(node)
        
        # Add all unvisited neighbors to the queue
        for neighbour in graph[node]:
            if neighbour not in visited:
                queue.append(neighbour)
    
    # Recursively call BFS for the next level
    bfs_recursive(visited, graph, queue)

def main():
    visited1 = set()  # To keep track of DFS visited nodes
    visited2 = set()  # To keep track of BFS visited nodes
    queue = []        # For BFS queue
    n = int(input("Enter number of nodes: "))
    graph = dict()

    # Building the graph with edges
    for i in range(1, n + 1):
        edges = int(input(f"Enter number of edges for node {i}: "))
        graph[i] = list()
        for j in range(1, edges + 1):
            node = int(input(f"Enter edge {j} for node {i}: "))
            graph[i].append(node)

    print("\nThe following is DFS:")
    dfs(visited1, graph, 1)
    
    print("\n\nThe following is BFS:")
    bfs_recursive(visited2, graph, [1])  # Start BFS with node 1 in the queue

if __name__ == "__main__":
    main()
